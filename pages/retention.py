# pages/retention.py
# M√≥dulo de Reten√ß√£o ‚Äì Funil, Follow-up e Gargalos

import streamlit as st
import pandas as pd
from utils.kpi_calculator import calcular_taxa_conversao
from utils.insights_generator import gerar_insight_tempo_conversao, gerar_tabela_motivos_perda # Importando geradores de insights

def show():
    st.title("üîÅ Reten√ß√£o de Leads ‚Äì Funil & Follow-Up")
    st.markdown("An√°lise da jornada do lead, tempo m√©dio de convers√£o e principais motivos de perda.")

    try:
        # Carregar dados do CRM (contendo informa√ß√µes do funil e tempo de convers√£o - conforme Etapa 10)
        df_crm = pd.read_csv("data/crm.csv", parse_dates=['Data do Lead', 'Data da Convers√£o'])
        # Carregar dados de c√°lculos consolidados (podendo conter informa√ß√µes agregadas do funil - conforme Etapa 10)
        df_calculos = pd.read_csv("data/calculos.csv")

        # --- M√©tricas Globais do Funil ---
        visitantes = df_calculos['Visitantes'].sum() if 'Visitantes' in df_calculos.columns else 0 # Assumindo coluna em calculos.csv
        leads = df_calculos['Leads'].sum() if 'Leads' in df_calculos.columns else 0 # Assumindo coluna em calculos.csv
        atendidos = df_crm[df_crm['STATUS DO LEAD'] != 'N√£o Contatado']['ID_Lead'].nunique() if 'STATUS DO LEAD' in df_crm.columns else 0 # Assumindo status
        convertidos = df_crm[df_crm['STATUS DO LEAD'] == 'CONVERTIDO']['ID_Lead'].nunique() if 'STATUS DO LEAD' in df_crm.columns else 0 # Assumindo status

        # --- C√°lculos ---
        taxa_vis_lead = calcular_taxa_conversao(leads, visitantes)
        taxa_lead_cliente = calcular_taxa_conversao(convertidos, atendidos)
        tempo_medio = (df_crm['Data da Convers√£o'] - df_crm['Data do Lead']).dt.days.mean() if ('Data da Convers√£o' in df_crm.columns and 'Data do Lead' in df_crm.columns) else 0

        col1, col2, col3 = st.columns(3)
        col1.metric("üì• Convers√£o Visitante ‚Üí Lead", f"{taxa_vis_lead:.2f}%")
        col2.metric("üéØ Convers√£o Atendido ‚Üí Cliente", f"{taxa_lead_cliente:.2f}%")
        col3.metric("‚è±Ô∏è Tempo m√©dio de convers√£o", f"{tempo_medio:.1f} dias")

        # --- Insight de Tempo M√©dio de Convers√£o ---
        st.markdown("---")
        st.subheader("üí° Insights")
        insight_tempo = gerar_insight_tempo_conversao(tempo_medio)
        st.info(insight_tempo)

        # --- Leads Ativos para Follow-up e Motivos de Perda ---
        st.markdown("---")
        st.subheader("üíî Motivos de Perda")
        st.write("An√°lise dos principais motivos pelos quais leads n√£o foram convertidos.")

        # Gerar tabela de motivos de perda usando fun√ß√£o do utils
        df_motivos_perda = gerar_tabela_motivos_perda(df_crm)
        st.dataframe(df_motivos_perda.style.format({"Percentual": "{:.2f}%"}))

        st.markdown("‚úÖ Use esses dados para refinar abordagens e identificar oportunidades de melhoria.")
        st.caption("Fonte: dados do CRM e c√°lculos (BR_BANK_DANI_KALOI.xlsv)")

    except FileNotFoundError:
        st.error("Erro: Os arquivos crm.csv ou calculos.csv n√£o foram encontrados na pasta 'data/'.")
    except KeyError as e:
        st.error(f"Erro: A coluna '{e}' n√£o foi encontrada nos arquivos de dados.")
    except Exception as e:
        st.error(f"Ocorreu um erro: {e}")
