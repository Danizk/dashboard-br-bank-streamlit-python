# üìà utils/kpi_calculator.py
# Fun√ß√µes para c√°lculo dos KPIs essenciais do dashboard do BR Bank

import pandas as pd
import numpy as np

# CAC ‚Äì Custo de Aquisi√ß√£o de Cliente
# F√≥rmula: (Custo Ads + Custo Time de Vendas) / Clientes Adquiridos
def calcular_cac(custo_ads, custo_vendas, num_clientes):
    if num_clientes == 0:
        return 0
    return (custo_ads + custo_vendas) / num_clientes

# ROAS ‚Äì Return on Ad Spend
# F√≥rmula: Receita / Custo com Ads
def calcular_roas(receita, custo_ads):
    if custo_ads == 0:
        return 0
    return receita / custo_ads

# CPA ‚Äì Custo por Aquisi√ß√£o de Lead
# F√≥rmula: Custo Total / N¬∫ de Leads Convertidos
def calcular_cpa(custo_total, num_leads_convertidos):
    if num_leads_convertidos == 0:
        return 0
    return custo_total / num_leads_convertidos

# CPC ‚Äì Custo por Clique
# F√≥rmula: Custo / Cliques
def calcular_cpc(custo_total, num_cliques):
    if num_cliques == 0:
        return 0
    return custo_total / num_cliques

# CTR ‚Äì Click Through Rate
# F√≥rmula: Cliques / Impress√µes
def calcular_ctr(cliques, impressoes):
    if impressoes == 0:
        return 0
    return cliques / impressoes

# Taxa de Convers√£o de Leads ‚Üí Clientes
# F√≥rmula: N¬∫ de Clientes / N¬∫ de Leads
def calcular_taxa_conversao(clientes, leads):
    if leads == 0:
        return 0
    return clientes / leads

# Taxa de Convers√£o de Visitantes ‚Üí Leads
# F√≥rmula: Leads / Visitantes
def calcular_conversao_visitantes_para_leads(leads, visitantes):
    if visitantes == 0:
        return 0
    return leads / visitantes

# Ticket M√©dio
# F√≥rmula: Receita Total / N¬∫ de Clientes
def calcular_ticket_medio(receita_total, num_clientes):
    if num_clientes == 0:
        return 0
    return receita_total / num_clientes

# LTV ‚Äì Lifetime Value
# F√≥rmula: Receita m√©dia estimada por cliente no per√≠odo de 12 meses
def calcular_ltv(ticket_medio, meses=12):
    return ticket_medio * (meses / 12)

# Tempo M√©dio de Convers√£o
# F√≥rmula: M√©dia de dias entre entrada e convers√£o
def calcular_tempo_medio_conversao(df):
    if df.empty or "Tempo at√© Convers√£o (Dias)" not in df.columns:
        return 0
    return df["Tempo at√© Convers√£o (Dias)"].mean()

# Receita por Vendedor
# Retorna um DataFrame com somat√≥rio por respons√°vel
def calcular_receita_por_vendedor(df):
    if "Vendedor que atendeu" not in df.columns or "Receita Gerada" not in df.columns:
        return pd.DataFrame()
    return df.groupby("Vendedor que atendeu")["Receita Gerada"].sum().reset_index()

# Convers√£o por Vendedor
# Retorna a taxa de convers√£o individual
def calcular_conversao_por_vendedor(df):
    if "Vendedor que atendeu" not in df.columns or "STATUS DO LEAD" not in df.columns:
        return pd.DataFrame()
    total = df.groupby("Vendedor que atendeu")["ID_Lead"].count()
    convertidos = df[df["STATUS DO LEAD"] == "CONVERTIDO"].groupby("Vendedor que atendeu")["ID_Lead"].count()
    return (convertidos / total).fillna(0).reset_index(name="Taxa de Convers√£o")
